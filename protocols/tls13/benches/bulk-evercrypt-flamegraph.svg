<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180"><g><title>bulk-4be43ee01eb7c08f`std::sys::unix::process::process_common::Command::setup_io (1 samples, 0.02%)</title><rect x="0.0000%" y="133" width="0.0223%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="143.50"></text></g><g><title>bulk-4be43ee01eb7c08f`std::sys::unix::process::process_common::Stdio::to_child_stdio (1 samples, 0.02%)</title><rect x="0.0000%" y="117" width="0.0223%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`std::sys::unix::pipe::anon_pipe (1 samples, 0.02%)</title><rect x="0.0000%" y="101" width="0.0223%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (1 samples, 0.02%)</title><rect x="0.0000%" y="85" width="0.0223%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="95.50"></text></g><g><title>bulk-4be43ee01eb7c08f`&lt;criterion::Criterion as core::default::Default&gt;::default (2 samples, 0.04%)</title><rect x="0.0000%" y="261" width="0.0446%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="271.50"></text></g><g><title>bulk-4be43ee01eb7c08f`std::sync::once::Once::call_inner (2 samples, 0.04%)</title><rect x="0.0000%" y="245" width="0.0446%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="255.50"></text></g><g><title>bulk-4be43ee01eb7c08f`std::sync::once::Once::call_once::_{{closure}} (2 samples, 0.04%)</title><rect x="0.0000%" y="229" width="0.0446%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="239.50"></text></g><g><title>bulk-4be43ee01eb7c08f`std::sync::once::Once::call_inner (2 samples, 0.04%)</title><rect x="0.0000%" y="213" width="0.0446%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="223.50"></text></g><g><title>bulk-4be43ee01eb7c08f`std::sync::once::Once::call_once::_{{closure}} (2 samples, 0.04%)</title><rect x="0.0000%" y="197" width="0.0446%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="207.50"></text></g><g><title>bulk-4be43ee01eb7c08f`criterion_plot::version (2 samples, 0.04%)</title><rect x="0.0000%" y="181" width="0.0446%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="191.50"></text></g><g><title>bulk-4be43ee01eb7c08f`std::process::Command::output (2 samples, 0.04%)</title><rect x="0.0000%" y="165" width="0.0446%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="175.50"></text></g><g><title>bulk-4be43ee01eb7c08f`std::sys::unix::process::process_inner::_&lt;impl std::sys::unix::process::process_common::Command&gt;::spawn (2 samples, 0.04%)</title><rect x="0.0000%" y="149" width="0.0446%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="159.50"></text></g><g><title>libsystem_c.dylib`posix_spawnp (1 samples, 0.02%)</title><rect x="0.0223%" y="133" width="0.0223%" height="15" fill="rgb(216,20,37)"/><text x="0.2723%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__posix_spawn (1 samples, 0.02%)</title><rect x="0.0223%" y="117" width="0.0223%" height="15" fill="rgb(206,188,39)"/><text x="0.2723%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`criterion::Criterion&lt;M&gt;::configure_from_args (1 samples, 0.02%)</title><rect x="0.0446%" y="261" width="0.0223%" height="15" fill="rgb(217,207,13)"/><text x="0.2946%" y="271.50"></text></g><g><title>bulk-4be43ee01eb7c08f`criterion::html::Html::new (1 samples, 0.02%)</title><rect x="0.0446%" y="245" width="0.0223%" height="15" fill="rgb(231,73,38)"/><text x="0.2946%" y="255.50"></text></g><g><title>bulk-4be43ee01eb7c08f`tinytemplate::TinyTemplate::add_template (1 samples, 0.02%)</title><rect x="0.0446%" y="229" width="0.0223%" height="15" fill="rgb(225,20,46)"/><text x="0.2946%" y="239.50"></text></g><g><title>bulk-4be43ee01eb7c08f`tinytemplate::compiler::TemplateCompiler::compile (1 samples, 0.02%)</title><rect x="0.0446%" y="213" width="0.0223%" height="15" fill="rgb(210,31,41)"/><text x="0.2946%" y="223.50"></text></g><g><title>bulk-4be43ee01eb7c08f`tinytemplate::compiler::TemplateCompiler::consume_tag (1 samples, 0.02%)</title><rect x="0.0446%" y="197" width="0.0223%" height="15" fill="rgb(221,200,47)"/><text x="0.2946%" y="207.50"></text></g><g><title>bulk-4be43ee01eb7c08f`core::str::_&lt;impl str&gt;::find (1 samples, 0.02%)</title><rect x="0.0446%" y="181" width="0.0223%" height="15" fill="rgb(226,26,5)"/><text x="0.2946%" y="191.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13api::encrypt_data (2 samples, 0.04%)</title><rect x="0.0669%" y="213" width="0.0446%" height="15" fill="rgb(249,33,26)"/><text x="0.3169%" y="223.50"></text></g><g><title>bulk-4be43ee01eb7c08f`__rdl_alloc (1 samples, 0.02%)</title><rect x="0.4235%" y="197" width="0.0223%" height="15" fill="rgb(235,183,28)"/><text x="0.6735%" y="207.50"></text></g><g><title>bulk-4be43ee01eb7c08f`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="0.4458%" y="197" width="0.0223%" height="15" fill="rgb(221,5,38)"/><text x="0.6958%" y="207.50"></text></g><g><title>bulk-4be43ee01eb7c08f`core::ptr::drop_in_place&lt;evercrypt::aead::Aead&gt; (1 samples, 0.02%)</title><rect x="0.6910%" y="149" width="0.0223%" height="15" fill="rgb(247,18,42)"/><text x="0.9410%" y="159.50"></text></g><g><title>bulk-4be43ee01eb7c08f`EverCrypt_AEAD_decrypt (1 samples, 0.02%)</title><rect x="0.7133%" y="133" width="0.0223%" height="15" fill="rgb(241,131,45)"/><text x="0.9633%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="0.8025%" y="101" width="0.0223%" height="15" fill="rgb(249,31,29)"/><text x="1.0525%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="0.8025%" y="85" width="0.0223%" height="15" fill="rgb(225,111,53)"/><text x="1.0525%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="0.8025%" y="69" width="0.0223%" height="15" fill="rgb(238,160,17)"/><text x="1.0525%" y="79.50"></text></g><g><title>bulk-4be43ee01eb7c08f`core::ptr::drop_in_place&lt;evercrypt::aead::Aead&gt; (5 samples, 0.11%)</title><rect x="0.7356%" y="133" width="0.1115%" height="15" fill="rgb(214,148,48)"/><text x="0.9856%" y="143.50"></text></g><g><title>bulk-4be43ee01eb7c08f`EverCrypt_AEAD_free (2 samples, 0.04%)</title><rect x="0.8025%" y="117" width="0.0446%" height="15" fill="rgb(232,36,49)"/><text x="1.0525%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="0.8248%" y="101" width="0.0223%" height="15" fill="rgb(209,103,24)"/><text x="1.0748%" y="111.50"></text></g><g><title>bulk-4be43ee01eb7c08f`Hacl_Chacha20_Vec256_chacha20_encrypt_256 (31 samples, 0.69%)</title><rect x="0.9140%" y="69" width="0.6910%" height="15" fill="rgb(229,88,8)"/><text x="1.1640%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1.5827%" y="53" width="0.0223%" height="15" fill="rgb(213,181,19)"/><text x="1.8327%" y="63.50"></text></g><g><title>bulk-4be43ee01eb7c08f`poly1305_padded_256 (12 samples, 0.27%)</title><rect x="1.6050%" y="69" width="0.2675%" height="15" fill="rgb(254,191,54)"/><text x="1.8550%" y="79.50"></text></g><g><title>bulk-4be43ee01eb7c08f`Hacl_Chacha20Poly1305_256_aead_decrypt (46 samples, 1.03%)</title><rect x="0.8694%" y="85" width="1.0254%" height="15" fill="rgb(241,83,37)"/><text x="1.1194%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1.8725%" y="69" width="0.0223%" height="15" fill="rgb(233,36,39)"/><text x="2.1225%" y="79.50"></text></g><g><title>bulk-4be43ee01eb7c08f`EverCrypt_AEAD_decrypt (48 samples, 1.07%)</title><rect x="0.8471%" y="117" width="1.0700%" height="15" fill="rgb(226,3,54)"/><text x="1.0971%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`EverCrypt_Chacha20Poly1305_aead_decrypt (47 samples, 1.05%)</title><rect x="0.8694%" y="101" width="1.0477%" height="15" fill="rgb(245,192,40)"/><text x="1.1194%" y="111.50"></text></g><g><title>bulk-4be43ee01eb7c08f`Hacl_Chacha20_Vec256_chacha20_encrypt_256 (1 samples, 0.02%)</title><rect x="1.8948%" y="85" width="0.0223%" height="15" fill="rgb(238,167,29)"/><text x="2.1448%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="1.9171%" y="69" width="0.0223%" height="15" fill="rgb(232,182,51)"/><text x="2.1671%" y="79.50"></text></g><g><title>bulk-4be43ee01eb7c08f`evercrypt::aead::Aead::decrypt (58 samples, 1.29%)</title><rect x="0.8471%" y="133" width="1.2929%" height="15" fill="rgb(231,60,39)"/><text x="1.0971%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (10 samples, 0.22%)</title><rect x="1.9171%" y="117" width="0.2229%" height="15" fill="rgb(208,69,12)"/><text x="2.1671%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.22%)</title><rect x="1.9171%" y="101" width="0.2229%" height="15" fill="rgb(235,93,37)"/><text x="2.1671%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.22%)</title><rect x="1.9171%" y="85" width="0.2229%" height="15" fill="rgb(213,116,39)"/><text x="2.1671%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (9 samples, 0.20%)</title><rect x="1.9394%" y="69" width="0.2006%" height="15" fill="rgb(222,207,29)"/><text x="2.1894%" y="79.50"></text></g><g><title>bulk-4be43ee01eb7c08f`EverCrypt_AEAD_create_in (2 samples, 0.04%)</title><rect x="2.1623%" y="117" width="0.0446%" height="15" fill="rgb(206,96,30)"/><text x="2.4123%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="2.1623%" y="101" width="0.0446%" height="15" fill="rgb(218,138,4)"/><text x="2.4123%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="2.1623%" y="85" width="0.0446%" height="15" fill="rgb(250,191,14)"/><text x="2.4123%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="2.1623%" y="69" width="0.0446%" height="15" fill="rgb(239,60,40)"/><text x="2.4123%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="2.1623%" y="53" width="0.0446%" height="15" fill="rgb(206,27,48)"/><text x="2.4123%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="2.1846%" y="37" width="0.0223%" height="15" fill="rgb(225,35,8)"/><text x="2.4346%" y="47.50"></text></g><g><title>bulk-4be43ee01eb7c08f`aes128_keyhash_init (1 samples, 0.02%)</title><rect x="2.2069%" y="117" width="0.0223%" height="15" fill="rgb(250,213,24)"/><text x="2.4569%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`check_aesni (10 samples, 0.22%)</title><rect x="2.2292%" y="117" width="0.2229%" height="15" fill="rgb(247,123,22)"/><text x="2.4792%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`check_avx (1 samples, 0.02%)</title><rect x="2.4521%" y="117" width="0.0223%" height="15" fill="rgb(231,138,38)"/><text x="2.7021%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`check_avx512 (3 samples, 0.07%)</title><rect x="2.4744%" y="117" width="0.0669%" height="15" fill="rgb(231,145,46)"/><text x="2.7244%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`check_rdrand (1 samples, 0.02%)</title><rect x="2.5412%" y="117" width="0.0223%" height="15" fill="rgb(251,118,11)"/><text x="2.7912%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`check_sha (1 samples, 0.02%)</title><rect x="2.5635%" y="117" width="0.0223%" height="15" fill="rgb(217,147,25)"/><text x="2.8135%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="2.5858%" y="117" width="0.0223%" height="15" fill="rgb(247,81,37)"/><text x="2.8358%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="2.5858%" y="101" width="0.0223%" height="15" fill="rgb(209,12,38)"/><text x="2.8358%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="2.5858%" y="85" width="0.0223%" height="15" fill="rgb(227,1,9)"/><text x="2.8358%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="2.5858%" y="69" width="0.0223%" height="15" fill="rgb(248,47,43)"/><text x="2.8358%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="2.6081%" y="117" width="0.0223%" height="15" fill="rgb(221,10,30)"/><text x="2.8581%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`evercrypt::aead::decrypt (87 samples, 1.94%)</title><rect x="0.7133%" y="149" width="1.9394%" height="15" fill="rgb(210,229,1)"/><text x="0.9633%" y="159.50">b..</text></g><g><title>bulk-4be43ee01eb7c08f`evercrypt::aead::Aead::new (23 samples, 0.51%)</title><rect x="2.1400%" y="133" width="0.5127%" height="15" fill="rgb(222,148,37)"/><text x="2.3900%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="2.6304%" y="117" width="0.0223%" height="15" fill="rgb(234,67,33)"/><text x="2.8804%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="3.9902%" y="117" width="0.0223%" height="15" fill="rgb(247,98,35)"/><text x="4.2402%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="3.9902%" y="101" width="0.0223%" height="15" fill="rgb(247,138,52)"/><text x="4.2402%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="3.9902%" y="85" width="0.0223%" height="15" fill="rgb(213,79,30)"/><text x="4.2402%" y="95.50"></text></g><g><title>bulk-4be43ee01eb7c08f`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.04%)</title><rect x="3.9902%" y="133" width="0.0446%" height="15" fill="rgb(246,177,23)"/><text x="4.2402%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="4.0125%" y="117" width="0.0223%" height="15" fill="rgb(230,62,27)"/><text x="4.2625%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`hacspec_lib::seq::Seq&lt;T&gt;::slice_range (63 samples, 1.40%)</title><rect x="2.6527%" y="149" width="1.4044%" height="15" fill="rgb(216,154,8)"/><text x="2.9027%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="4.0348%" y="133" width="0.0223%" height="15" fill="rgb(244,35,45)"/><text x="4.2848%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="4.2354%" y="133" width="0.0223%" height="15" fill="rgb(251,115,12)"/><text x="4.4854%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="4.2354%" y="117" width="0.0223%" height="15" fill="rgb(240,54,50)"/><text x="4.4854%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`hacspec_lib::seq::Seq&lt;secret_integers::U8&gt;::from_public_slice (10 samples, 0.22%)</title><rect x="4.0571%" y="149" width="0.2229%" height="15" fill="rgb(233,84,52)"/><text x="4.3071%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="4.2577%" y="133" width="0.0223%" height="15" fill="rgb(207,117,47)"/><text x="4.5077%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.09%)</title><rect x="4.2800%" y="149" width="0.0892%" height="15" fill="rgb(249,43,39)"/><text x="4.5300%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.09%)</title><rect x="4.2800%" y="133" width="0.0892%" height="15" fill="rgb(209,38,44)"/><text x="4.5300%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.09%)</title><rect x="4.2800%" y="117" width="0.0892%" height="15" fill="rgb(236,212,23)"/><text x="4.5300%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="4.3469%" y="101" width="0.0223%" height="15" fill="rgb(242,79,21)"/><text x="4.5969%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="4.3691%" y="149" width="0.0446%" height="15" fill="rgb(211,96,35)"/><text x="4.6191%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.04%)</title><rect x="4.3691%" y="133" width="0.0446%" height="15" fill="rgb(253,215,40)"/><text x="4.6191%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.04%)</title><rect x="4.3691%" y="117" width="0.0446%" height="15" fill="rgb(211,81,21)"/><text x="4.6191%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::cryptolib_evercrypt::aead_decrypt (177 samples, 3.95%)</title><rect x="0.4904%" y="165" width="3.9456%" height="15" fill="rgb(208,190,38)"/><text x="0.7404%" y="175.50">bulk..</text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="4.4137%" y="149" width="0.0223%" height="15" fill="rgb(235,213,38)"/><text x="4.6637%" y="159.50"></text></g><g><title>bulk-4be43ee01eb7c08f`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="4.4360%" y="149" width="0.0223%" height="15" fill="rgb(237,122,38)"/><text x="4.6860%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="4.4360%" y="133" width="0.0223%" height="15" fill="rgb(244,218,35)"/><text x="4.6860%" y="143.50"></text></g><g><title>bulk-4be43ee01eb7c08f`secret_integers::U64::to_be_bytes (1 samples, 0.02%)</title><rect x="4.4583%" y="133" width="0.0223%" height="15" fill="rgb(240,68,47)"/><text x="4.7083%" y="143.50"></text></g><g><title>bulk-4be43ee01eb7c08f`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="4.4583%" y="117" width="0.0223%" height="15" fill="rgb(210,16,53)"/><text x="4.7083%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13record::derive_iv_ctr (3 samples, 0.07%)</title><rect x="4.4360%" y="165" width="0.0669%" height="15" fill="rgb(235,124,12)"/><text x="4.6860%" y="175.50"></text></g><g><title>bulk-4be43ee01eb7c08f`hacspec_lib::transmute::U64_to_be_bytes (2 samples, 0.04%)</title><rect x="4.4583%" y="149" width="0.0446%" height="15" fill="rgb(224,169,11)"/><text x="4.7083%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="4.4806%" y="133" width="0.0223%" height="15" fill="rgb(250,166,2)"/><text x="4.7306%" y="143.50"></text></g><g><title>bulk-4be43ee01eb7c08f`evercrypt::aead::decrypt (1 samples, 0.02%)</title><rect x="4.5029%" y="165" width="0.0223%" height="15" fill="rgb(242,216,29)"/><text x="4.7529%" y="175.50"></text></g><g><title>bulk-4be43ee01eb7c08f`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="11.5247%" y="149" width="0.0223%" height="15" fill="rgb(230,116,27)"/><text x="11.7747%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="11.5247%" y="133" width="0.0223%" height="15" fill="rgb(228,99,48)"/><text x="11.7747%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="11.5247%" y="117" width="0.0223%" height="15" fill="rgb(253,11,6)"/><text x="11.7747%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="11.5247%" y="101" width="0.0223%" height="15" fill="rgb(247,143,39)"/><text x="11.7747%" y="111.50"></text></g><g><title>bulk-4be43ee01eb7c08f`hacspec_lib::seq::Seq&lt;T&gt;::slice_range (319 samples, 7.11%)</title><rect x="4.5252%" y="165" width="7.1110%" height="15" fill="rgb(236,97,10)"/><text x="4.7752%" y="175.50">bulk-4be43..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (4 samples, 0.09%)</title><rect x="11.5470%" y="149" width="0.0892%" height="15" fill="rgb(233,208,19)"/><text x="11.7970%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="11.6362%" y="165" width="0.0223%" height="15" fill="rgb(216,164,2)"/><text x="11.8862%" y="175.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13record::decrypt_record_payload (502 samples, 11.19%)</title><rect x="0.4904%" y="181" width="11.1904%" height="15" fill="rgb(220,129,5)"/><text x="0.7404%" y="191.50">bulk-4be43ee01eb..</text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="11.6585%" y="165" width="0.0223%" height="15" fill="rgb(242,17,10)"/><text x="11.9085%" y="175.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13api::decrypt_data (504 samples, 11.23%)</title><rect x="0.4681%" y="197" width="11.2350%" height="15" fill="rgb(242,107,0)"/><text x="0.7181%" y="207.50">bulk-4be43ee01eb7..</text></g><g><title>bulk-4be43ee01eb7c08f`hacspec_lib::transmute::u16_to_be_bytes (1 samples, 0.02%)</title><rect x="11.6808%" y="181" width="0.0223%" height="15" fill="rgb(251,28,31)"/><text x="11.9308%" y="191.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::cryptolib_evercrypt::aead_encrypt (1 samples, 0.02%)</title><rect x="11.7254%" y="181" width="0.0223%" height="15" fill="rgb(233,223,10)"/><text x="11.9754%" y="191.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13record::derive_iv_ctr (1 samples, 0.02%)</title><rect x="11.7477%" y="181" width="0.0223%" height="15" fill="rgb(215,21,27)"/><text x="11.9977%" y="191.50"></text></g><g><title>bulk-4be43ee01eb7c08f`EverCrypt_AEAD_create_in (1 samples, 0.02%)</title><rect x="12.2381%" y="133" width="0.0223%" height="15" fill="rgb(232,23,21)"/><text x="12.4881%" y="143.50"></text></g><g><title>bulk-4be43ee01eb7c08f`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="12.2827%" y="85" width="0.0223%" height="15" fill="rgb(244,5,23)"/><text x="12.5327%" y="95.50"></text></g><g><title>bulk-4be43ee01eb7c08f`Hacl_Chacha20_Vec256_chacha20_encrypt_256 (68 samples, 1.52%)</title><rect x="12.3049%" y="85" width="1.5158%" height="15" fill="rgb(226,81,46)"/><text x="12.5549%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="13.7985%" y="69" width="0.0223%" height="15" fill="rgb(247,70,30)"/><text x="14.0485%" y="79.50"></text></g><g><title>bulk-4be43ee01eb7c08f`poly1305_padded_256 (25 samples, 0.56%)</title><rect x="13.8208%" y="85" width="0.5573%" height="15" fill="rgb(212,68,19)"/><text x="14.0708%" y="95.50"></text></g><g><title>bulk-4be43ee01eb7c08f`Hacl_Impl_Poly1305_Field32xN_256_fmul_r4_normalize (2 samples, 0.04%)</title><rect x="14.3335%" y="69" width="0.0446%" height="15" fill="rgb(240,187,13)"/><text x="14.5835%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="14.3781%" y="85" width="0.0223%" height="15" fill="rgb(223,113,26)"/><text x="14.6281%" y="95.50"></text></g><g><title>bulk-4be43ee01eb7c08f`EverCrypt_AEAD_encrypt (97 samples, 2.16%)</title><rect x="12.2604%" y="133" width="2.1623%" height="15" fill="rgb(206,192,2)"/><text x="12.5104%" y="143.50">b..</text></g><g><title>bulk-4be43ee01eb7c08f`EverCrypt_Chacha20Poly1305_aead_encrypt (97 samples, 2.16%)</title><rect x="12.2604%" y="117" width="2.1623%" height="15" fill="rgb(241,108,4)"/><text x="12.5104%" y="127.50">b..</text></g><g><title>bulk-4be43ee01eb7c08f`Hacl_Chacha20Poly1305_256_aead_encrypt (97 samples, 2.16%)</title><rect x="12.2604%" y="101" width="2.1623%" height="15" fill="rgb(247,173,49)"/><text x="12.5104%" y="111.50">b..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="14.4004%" y="85" width="0.0223%" height="15" fill="rgb(224,114,35)"/><text x="14.6504%" y="95.50"></text></g><g><title>bulk-4be43ee01eb7c08f`EverCrypt_AEAD_free (1 samples, 0.02%)</title><rect x="14.4226%" y="117" width="0.0223%" height="15" fill="rgb(245,159,27)"/><text x="14.6726%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="14.4226%" y="101" width="0.0223%" height="15" fill="rgb(245,172,44)"/><text x="14.6726%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="14.4226%" y="85" width="0.0223%" height="15" fill="rgb(236,23,11)"/><text x="14.6726%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="14.4226%" y="69" width="0.0223%" height="15" fill="rgb(205,117,38)"/><text x="14.6726%" y="79.50"></text></g><g><title>bulk-4be43ee01eb7c08f`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="14.4449%" y="117" width="0.0223%" height="15" fill="rgb(237,72,25)"/><text x="14.6949%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="14.4672%" y="117" width="0.0669%" height="15" fill="rgb(244,70,9)"/><text x="14.7172%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.07%)</title><rect x="14.4672%" y="101" width="0.0669%" height="15" fill="rgb(217,125,39)"/><text x="14.7172%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="14.4895%" y="85" width="0.0446%" height="15" fill="rgb(235,36,10)"/><text x="14.7395%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="14.5118%" y="69" width="0.0223%" height="15" fill="rgb(251,123,47)"/><text x="14.7618%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="14.5341%" y="117" width="0.0223%" height="15" fill="rgb(221,13,13)"/><text x="14.7841%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="14.5341%" y="101" width="0.0223%" height="15" fill="rgb(238,131,9)"/><text x="14.7841%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="14.5341%" y="85" width="0.0223%" height="15" fill="rgb(211,50,8)"/><text x="14.7841%" y="95.50"></text></g><g><title>bulk-4be43ee01eb7c08f`core::ptr::drop_in_place&lt;evercrypt::aead::Aead&gt; (8 samples, 0.18%)</title><rect x="14.4226%" y="133" width="0.1783%" height="15" fill="rgb(245,182,24)"/><text x="14.6726%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="14.5564%" y="117" width="0.0446%" height="15" fill="rgb(242,14,37)"/><text x="14.8064%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="14.5787%" y="101" width="0.0223%" height="15" fill="rgb(246,228,12)"/><text x="14.8287%" y="111.50"></text></g><g><title>bulk-4be43ee01eb7c08f`aes128_keyhash_init (2 samples, 0.04%)</title><rect x="14.6233%" y="117" width="0.0446%" height="15" fill="rgb(213,55,15)"/><text x="14.8733%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`check_adx_bmi2 (1 samples, 0.02%)</title><rect x="14.6679%" y="117" width="0.0223%" height="15" fill="rgb(209,9,3)"/><text x="14.9179%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`check_aesni (14 samples, 0.31%)</title><rect x="14.6901%" y="117" width="0.3121%" height="15" fill="rgb(230,59,30)"/><text x="14.9401%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`check_avx512 (2 samples, 0.04%)</title><rect x="15.0022%" y="117" width="0.0446%" height="15" fill="rgb(209,121,21)"/><text x="15.2522%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`check_osxsave (3 samples, 0.07%)</title><rect x="15.0468%" y="117" width="0.0669%" height="15" fill="rgb(220,109,13)"/><text x="15.2968%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`check_sha (2 samples, 0.04%)</title><rect x="15.1137%" y="117" width="0.0446%" height="15" fill="rgb(232,18,1)"/><text x="15.3637%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`check_sse (1 samples, 0.02%)</title><rect x="15.1583%" y="117" width="0.0223%" height="15" fill="rgb(215,41,42)"/><text x="15.4083%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="15.2029%" y="85" width="0.0223%" height="15" fill="rgb(224,123,36)"/><text x="15.4529%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.11%)</title><rect x="15.1806%" y="117" width="0.1115%" height="15" fill="rgb(240,125,3)"/><text x="15.4306%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.09%)</title><rect x="15.2029%" y="101" width="0.0892%" height="15" fill="rgb(205,98,50)"/><text x="15.4529%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.07%)</title><rect x="15.2251%" y="85" width="0.0669%" height="15" fill="rgb(205,185,37)"/><text x="15.4751%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="15.2474%" y="69" width="0.0446%" height="15" fill="rgb(238,207,15)"/><text x="15.4974%" y="79.50"></text></g><g><title>bulk-4be43ee01eb7c08f`evercrypt::aead::Aead::new (32 samples, 0.71%)</title><rect x="14.6010%" y="133" width="0.7133%" height="15" fill="rgb(213,199,42)"/><text x="14.8510%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`calloc (1 samples, 0.02%)</title><rect x="15.2920%" y="117" width="0.0223%" height="15" fill="rgb(235,201,11)"/><text x="15.5420%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.04%)</title><rect x="15.3143%" y="85" width="0.0446%" height="15" fill="rgb(207,46,11)"/><text x="15.5643%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="15.3366%" y="69" width="0.0223%" height="15" fill="rgb(241,35,35)"/><text x="15.5866%" y="79.50"></text></g><g><title>bulk-4be43ee01eb7c08f`evercrypt::aead::encrypt (146 samples, 3.25%)</title><rect x="12.1489%" y="149" width="3.2546%" height="15" fill="rgb(243,32,47)"/><text x="12.3989%" y="159.50">bul..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (4 samples, 0.09%)</title><rect x="15.3143%" y="133" width="0.0892%" height="15" fill="rgb(247,202,23)"/><text x="15.5643%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.09%)</title><rect x="15.3143%" y="117" width="0.0892%" height="15" fill="rgb(219,102,11)"/><text x="15.5643%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.09%)</title><rect x="15.3143%" y="101" width="0.0892%" height="15" fill="rgb(243,110,44)"/><text x="15.5643%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="15.3589%" y="85" width="0.0446%" height="15" fill="rgb(222,74,54)"/><text x="15.6089%" y="95.50"></text></g><g><title>bulk-4be43ee01eb7c08f`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="19.5943%" y="133" width="0.0223%" height="15" fill="rgb(216,99,12)"/><text x="19.8443%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="19.5943%" y="117" width="0.0223%" height="15" fill="rgb(226,22,26)"/><text x="19.8443%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="19.5943%" y="101" width="0.0223%" height="15" fill="rgb(217,163,10)"/><text x="19.8443%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="19.5943%" y="85" width="0.0223%" height="15" fill="rgb(213,25,53)"/><text x="19.8443%" y="95.50"></text></g><g><title>bulk-4be43ee01eb7c08f`hacspec_lib::seq::Seq&lt;T&gt;::concat (195 samples, 4.35%)</title><rect x="15.4035%" y="149" width="4.3469%" height="15" fill="rgb(252,105,26)"/><text x="15.6535%" y="159.50">bulk-..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (6 samples, 0.13%)</title><rect x="19.6166%" y="133" width="0.1337%" height="15" fill="rgb(220,39,43)"/><text x="19.8666%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="20.1516%" y="69" width="0.0223%" height="15" fill="rgb(229,68,48)"/><text x="20.4016%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="20.1739%" y="69" width="0.0223%" height="15" fill="rgb(252,8,32)"/><text x="20.4239%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.16%)</title><rect x="20.0847%" y="133" width="0.1560%" height="15" fill="rgb(223,20,43)"/><text x="20.3347%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.16%)</title><rect x="20.0847%" y="117" width="0.1560%" height="15" fill="rgb(229,81,49)"/><text x="20.3347%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.13%)</title><rect x="20.1070%" y="101" width="0.1337%" height="15" fill="rgb(236,28,36)"/><text x="20.3570%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (4 samples, 0.09%)</title><rect x="20.1516%" y="85" width="0.0892%" height="15" fill="rgb(249,185,26)"/><text x="20.4016%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.04%)</title><rect x="20.1962%" y="69" width="0.0446%" height="15" fill="rgb(249,174,33)"/><text x="20.4462%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="20.2407%" y="133" width="0.0223%" height="15" fill="rgb(233,201,37)"/><text x="20.4907%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="20.2630%" y="133" width="0.0223%" height="15" fill="rgb(221,78,26)"/><text x="20.5130%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="20.2853%" y="133" width="0.0223%" height="15" fill="rgb(250,127,30)"/><text x="20.5353%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="20.2853%" y="117" width="0.0223%" height="15" fill="rgb(230,49,44)"/><text x="20.5353%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="20.2853%" y="101" width="0.0223%" height="15" fill="rgb(229,67,23)"/><text x="20.5353%" y="111.50"></text></g><g><title>bulk-4be43ee01eb7c08f`hacspec_lib::seq::Seq&lt;secret_integers::U8&gt;::from_public_slice (130 samples, 2.90%)</title><rect x="19.7503%" y="149" width="2.8979%" height="15" fill="rgb(249,83,47)"/><text x="20.0003%" y="159.50">bu..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (105 samples, 2.34%)</title><rect x="20.3076%" y="133" width="2.3406%" height="15" fill="rgb(215,43,3)"/><text x="20.5576%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="22.6482%" y="149" width="0.0446%" height="15" fill="rgb(238,154,13)"/><text x="22.8982%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="22.6482%" y="133" width="0.0446%" height="15" fill="rgb(219,56,2)"/><text x="22.8982%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="22.6482%" y="117" width="0.0446%" height="15" fill="rgb(233,0,4)"/><text x="22.8982%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="22.6705%" y="101" width="0.0223%" height="15" fill="rgb(235,30,7)"/><text x="22.9205%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.13%)</title><rect x="22.6928%" y="149" width="0.1337%" height="15" fill="rgb(250,79,13)"/><text x="22.9428%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.07%)</title><rect x="22.7597%" y="133" width="0.0669%" height="15" fill="rgb(211,146,34)"/><text x="23.0097%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.07%)</title><rect x="22.7597%" y="117" width="0.0669%" height="15" fill="rgb(228,22,38)"/><text x="23.0097%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="22.8266%" y="149" width="0.0223%" height="15" fill="rgb(235,168,5)"/><text x="23.0766%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="22.8266%" y="133" width="0.0223%" height="15" fill="rgb(221,155,16)"/><text x="23.0766%" y="143.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::cryptolib_evercrypt::aead_encrypt (498 samples, 11.10%)</title><rect x="11.7700%" y="165" width="11.1012%" height="15" fill="rgb(215,215,53)"/><text x="12.0200%" y="175.50">bulk-4be43ee01eb..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="22.8489%" y="149" width="0.0223%" height="15" fill="rgb(223,4,10)"/><text x="23.0989%" y="159.50"></text></g><g><title>bulk-4be43ee01eb7c08f`DYLD-STUB$$__bzero (1 samples, 0.02%)</title><rect x="22.9157%" y="149" width="0.0223%" height="15" fill="rgb(234,103,6)"/><text x="23.1657%" y="159.50"></text></g><g><title>bulk-4be43ee01eb7c08f`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="22.9380%" y="149" width="0.0223%" height="15" fill="rgb(227,97,0)"/><text x="23.1880%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="22.9380%" y="133" width="0.0223%" height="15" fill="rgb(234,150,53)"/><text x="23.1880%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="22.9380%" y="117" width="0.0223%" height="15" fill="rgb(228,201,54)"/><text x="23.1880%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="22.9380%" y="101" width="0.0223%" height="15" fill="rgb(222,22,37)"/><text x="23.1880%" y="111.50"></text></g><g><title>bulk-4be43ee01eb7c08f`hacspec_lib::seq::Seq&lt;T&gt;::from_seq (3 samples, 0.07%)</title><rect x="22.9603%" y="149" width="0.0669%" height="15" fill="rgb(237,53,32)"/><text x="23.2103%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="23.1164%" y="101" width="0.0223%" height="15" fill="rgb(233,25,53)"/><text x="23.3664%" y="111.50"></text></g><g><title>bulk-4be43ee01eb7c08f`hacspec_lib::transmute::U64_to_be_bytes (6 samples, 0.13%)</title><rect x="23.0272%" y="149" width="0.1337%" height="15" fill="rgb(210,40,34)"/><text x="23.2772%" y="159.50"></text></g><g><title>bulk-4be43ee01eb7c08f`secret_integers::U64::to_be_bytes (5 samples, 0.11%)</title><rect x="23.0495%" y="133" width="0.1115%" height="15" fill="rgb(241,220,44)"/><text x="23.2995%" y="143.50"></text></g><g><title>bulk-4be43ee01eb7c08f`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.11%)</title><rect x="23.0495%" y="117" width="0.1115%" height="15" fill="rgb(235,28,35)"/><text x="23.2995%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="23.1387%" y="101" width="0.0223%" height="15" fill="rgb(210,56,17)"/><text x="23.3887%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="23.1387%" y="85" width="0.0223%" height="15" fill="rgb(224,130,29)"/><text x="23.3887%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="23.1387%" y="69" width="0.0223%" height="15" fill="rgb(235,212,8)"/><text x="23.3887%" y="79.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13record::derive_iv_ctr (14 samples, 0.31%)</title><rect x="22.8712%" y="165" width="0.3121%" height="15" fill="rgb(223,33,50)"/><text x="23.1212%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="23.1609%" y="149" width="0.0223%" height="15" fill="rgb(219,149,13)"/><text x="23.4109%" y="159.50"></text></g><g><title>bulk-4be43ee01eb7c08f`evercrypt::aead::encrypt (1 samples, 0.02%)</title><rect x="23.1832%" y="165" width="0.0223%" height="15" fill="rgb(250,156,29)"/><text x="23.4332%" y="175.50"></text></g><g><title>bulk-4be43ee01eb7c08f`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.04%)</title><rect x="40.3477%" y="149" width="0.0446%" height="15" fill="rgb(216,193,19)"/><text x="40.5977%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="40.3477%" y="133" width="0.0446%" height="15" fill="rgb(216,135,14)"/><text x="40.5977%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="40.3477%" y="117" width="0.0446%" height="15" fill="rgb(241,47,5)"/><text x="40.5977%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.04%)</title><rect x="40.3477%" y="101" width="0.0446%" height="15" fill="rgb(233,42,35)"/><text x="40.5977%" y="111.50"></text></g><g><title>bulk-4be43ee01eb7c08f`hacspec_lib::seq::Seq&lt;T&gt;::concat (783 samples, 17.45%)</title><rect x="23.2055%" y="165" width="17.4543%" height="15" fill="rgb(231,13,6)"/><text x="23.4555%" y="175.50">bulk-4be43ee01eb7c08f`hacsp..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (12 samples, 0.27%)</title><rect x="40.3923%" y="149" width="0.2675%" height="15" fill="rgb(207,181,40)"/><text x="40.6423%" y="159.50"></text></g><g><title>bulk-4be43ee01eb7c08f`hacspec_lib::seq::Seq&lt;T&gt;::from_seq (3 samples, 0.07%)</title><rect x="40.6598%" y="165" width="0.0669%" height="15" fill="rgb(254,173,49)"/><text x="40.9098%" y="175.50"></text></g><g><title>bulk-4be43ee01eb7c08f`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="40.7044%" y="149" width="0.0223%" height="15" fill="rgb(221,1,38)"/><text x="40.9544%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="40.7044%" y="133" width="0.0223%" height="15" fill="rgb(206,124,46)"/><text x="40.9544%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="40.7044%" y="117" width="0.0223%" height="15" fill="rgb(249,21,11)"/><text x="40.9544%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="40.7044%" y="101" width="0.0223%" height="15" fill="rgb(222,201,40)"/><text x="40.9544%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.04%)</title><rect x="40.7490%" y="149" width="0.0446%" height="15" fill="rgb(235,61,29)"/><text x="40.9990%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.09%)</title><rect x="40.7267%" y="165" width="0.0892%" height="15" fill="rgb(219,207,3)"/><text x="40.9767%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="40.7936%" y="149" width="0.0223%" height="15" fill="rgb(222,56,46)"/><text x="41.0436%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="40.7936%" y="133" width="0.0223%" height="15" fill="rgb(239,76,54)"/><text x="41.0436%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (4 samples, 0.09%)</title><rect x="40.8159%" y="165" width="0.0892%" height="15" fill="rgb(231,124,27)"/><text x="41.0659%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="40.8827%" y="149" width="0.0223%" height="15" fill="rgb(249,195,6)"/><text x="41.1327%" y="159.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13record::encrypt_record_payload (1,310 samples, 29.20%)</title><rect x="11.7700%" y="181" width="29.2020%" height="15" fill="rgb(237,174,47)"/><text x="12.0200%" y="191.50">bulk-4be43ee01eb7c08f`bertie::tls13record::encr..</text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.07%)</title><rect x="40.9050%" y="165" width="0.0669%" height="15" fill="rgb(206,201,31)"/><text x="41.1550%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="40.9496%" y="149" width="0.0223%" height="15" fill="rgb(231,57,52)"/><text x="41.1996%" y="159.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13api::encrypt_data (1,314 samples, 29.29%)</title><rect x="11.7031%" y="197" width="29.2911%" height="15" fill="rgb(248,177,22)"/><text x="11.9531%" y="207.50">bulk-4be43ee01eb7c08f`bertie::tls13api::encrypt..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="40.9719%" y="181" width="0.0223%" height="15" fill="rgb(215,211,37)"/><text x="41.2219%" y="191.50"></text></g><g><title>bulk-4be43ee01eb7c08f`norm (1 samples, 0.02%)</title><rect x="40.9942%" y="85" width="0.0223%" height="15" fill="rgb(241,128,51)"/><text x="41.2442%" y="95.50"></text></g><g><title>bulk-4be43ee01eb7c08f`exponent (1 samples, 0.02%)</title><rect x="40.9942%" y="69" width="0.0223%" height="15" fill="rgb(227,165,31)"/><text x="41.2442%" y="79.50"></text></g><g><title>bulk-4be43ee01eb7c08f`montgomery_square_buffer (1 samples, 0.02%)</title><rect x="40.9942%" y="53" width="0.0223%" height="15" fill="rgb(228,167,24)"/><text x="41.2442%" y="63.50"></text></g><g><title>bulk-4be43ee01eb7c08f`secretToPublicWithoutNorm (1 samples, 0.02%)</title><rect x="41.0165%" y="85" width="0.0223%" height="15" fill="rgb(228,143,12)"/><text x="41.2665%" y="95.50"></text></g><g><title>bulk-4be43ee01eb7c08f`point_double (1 samples, 0.02%)</title><rect x="41.0165%" y="69" width="0.0223%" height="15" fill="rgb(249,149,8)"/><text x="41.2665%" y="79.50"></text></g><g><title>bulk-4be43ee01eb7c08f`montgomery_square_buffer (1 samples, 0.02%)</title><rect x="41.0165%" y="53" width="0.0223%" height="15" fill="rgb(243,35,44)"/><text x="41.2665%" y="63.50"></text></g><g><title>bulk-4be43ee01eb7c08f`Hacl_P256_ecdsa_verif_p256_sha2 (3 samples, 0.07%)</title><rect x="40.9942%" y="117" width="0.0669%" height="15" fill="rgb(246,89,9)"/><text x="41.2442%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`ecdsa_verification_ (3 samples, 0.07%)</title><rect x="40.9942%" y="101" width="0.0669%" height="15" fill="rgb(233,213,13)"/><text x="41.2442%" y="111.50"></text></g><g><title>bulk-4be43ee01eb7c08f`verifyQValidCurvePoint (1 samples, 0.02%)</title><rect x="41.0388%" y="85" width="0.0223%" height="15" fill="rgb(233,141,41)"/><text x="41.2888%" y="95.50"></text></g><g><title>bulk-4be43ee01eb7c08f`norm (1 samples, 0.02%)</title><rect x="41.0388%" y="69" width="0.0223%" height="15" fill="rgb(239,167,4)"/><text x="41.2888%" y="79.50"></text></g><g><title>bulk-4be43ee01eb7c08f`exponent (1 samples, 0.02%)</title><rect x="41.0388%" y="53" width="0.0223%" height="15" fill="rgb(209,217,16)"/><text x="41.2888%" y="63.50"></text></g><g><title>bulk-4be43ee01eb7c08f`montgomery_square_buffer (1 samples, 0.02%)</title><rect x="41.0388%" y="37" width="0.0223%" height="15" fill="rgb(219,88,35)"/><text x="41.2888%" y="47.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13api::client_finish (4 samples, 0.09%)</title><rect x="40.9942%" y="181" width="0.0892%" height="15" fill="rgb(220,193,23)"/><text x="41.2442%" y="191.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13handshake::put_server_signature (4 samples, 0.09%)</title><rect x="40.9942%" y="165" width="0.0892%" height="15" fill="rgb(230,90,52)"/><text x="41.2442%" y="175.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::cryptolib_evercrypt::verify (4 samples, 0.09%)</title><rect x="40.9942%" y="149" width="0.0892%" height="15" fill="rgb(252,106,19)"/><text x="41.2442%" y="159.50"></text></g><g><title>bulk-4be43ee01eb7c08f`evercrypt::p256::ecdsa_verify (4 samples, 0.09%)</title><rect x="40.9942%" y="133" width="0.0892%" height="15" fill="rgb(206,74,20)"/><text x="41.2442%" y="143.50"></text></g><g><title>bulk-4be43ee01eb7c08f`Hacl_P256_verify_q (1 samples, 0.02%)</title><rect x="41.0611%" y="117" width="0.0223%" height="15" fill="rgb(230,138,44)"/><text x="41.3111%" y="127.50"></text></g><g><title>bulk-4be43ee01eb7c08f`verifyQValidCurvePoint (1 samples, 0.02%)</title><rect x="41.0611%" y="101" width="0.0223%" height="15" fill="rgb(235,182,43)"/><text x="41.3111%" y="111.50"></text></g><g><title>bulk-4be43ee01eb7c08f`point_double (1 samples, 0.02%)</title><rect x="41.0611%" y="85" width="0.0223%" height="15" fill="rgb(242,16,51)"/><text x="41.3111%" y="95.50"></text></g><g><title>bulk-4be43ee01eb7c08f`montgomery_square_buffer (1 samples, 0.02%)</title><rect x="41.0611%" y="69" width="0.0223%" height="15" fill="rgb(248,9,4)"/><text x="41.3111%" y="79.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13formats::certificate_verify (1 samples, 0.02%)</title><rect x="41.0834%" y="165" width="0.0223%" height="15" fill="rgb(210,31,22)"/><text x="41.3334%" y="175.50"></text></g><g><title>bulk-4be43ee01eb7c08f`hacspec_lib::seq::Seq&lt;T&gt;::slice (1 samples, 0.02%)</title><rect x="41.0834%" y="149" width="0.0223%" height="15" fill="rgb(239,54,39)"/><text x="41.3334%" y="159.50"></text></g><g><title>bulk-4be43ee01eb7c08f`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="41.0834%" y="133" width="0.0223%" height="15" fill="rgb(230,99,41)"/><text x="41.3334%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="41.0834%" y="117" width="0.0223%" height="15" fill="rgb(253,106,12)"/><text x="41.3334%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="41.0834%" y="101" width="0.0223%" height="15" fill="rgb(213,46,41)"/><text x="41.3334%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="41.0834%" y="85" width="0.0223%" height="15" fill="rgb(215,133,35)"/><text x="41.3334%" y="95.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bulk::bench::init_tls_session (6 samples, 0.13%)</title><rect x="40.9942%" y="197" width="0.1337%" height="15" fill="rgb(213,28,5)"/><text x="41.2442%" y="207.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13api::server_init (2 samples, 0.04%)</title><rect x="41.0834%" y="181" width="0.0446%" height="15" fill="rgb(215,77,49)"/><text x="41.3334%" y="191.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13handshake::derive_app_keys (1 samples, 0.02%)</title><rect x="41.1057%" y="165" width="0.0223%" height="15" fill="rgb(248,100,22)"/><text x="41.3557%" y="175.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13handshake::derive_aead_key_iv (1 samples, 0.02%)</title><rect x="41.1057%" y="149" width="0.0223%" height="15" fill="rgb(208,67,9)"/><text x="41.3557%" y="159.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13handshake::hkdf_expand_label (1 samples, 0.02%)</title><rect x="41.1057%" y="133" width="0.0223%" height="15" fill="rgb(219,133,21)"/><text x="41.3557%" y="143.50"></text></g><g><title>bulk-4be43ee01eb7c08f`bertie::tls13formats::Bytes6::concat (1 samples, 0.02%)</title><rect x="41.1057%" y="117" width="0.0223%" height="15" fill="rgb(246,46,29)"/><text x="41.3557%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="41.1057%" y="101" width="0.0223%" height="15" fill="rgb(246,185,52)"/><text x="41.3557%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="41.1057%" y="85" width="0.0223%" height="15" fill="rgb(252,136,11)"/><text x="41.3557%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="41.1057%" y="69" width="0.0223%" height="15" fill="rgb(219,138,53)"/><text x="41.3557%" y="79.50"></text></g><g><title>bulk-4be43ee01eb7c08f`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (1 samples, 0.02%)</title><rect x="58.6045%" y="165" width="0.0223%" height="15" fill="rgb(211,51,23)"/><text x="58.8545%" y="175.50"></text></g><g><title>bulk-4be43ee01eb7c08f`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (66 samples, 1.47%)</title><rect x="58.6937%" y="149" width="1.4712%" height="15" fill="rgb(247,221,28)"/><text x="58.9437%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (66 samples, 1.47%)</title><rect x="58.6937%" y="133" width="1.4712%" height="15" fill="rgb(251,222,45)"/><text x="58.9437%" y="143.50"></text></g><g><title>bulk-4be43ee01eb7c08f`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (70 samples, 1.56%)</title><rect x="58.6268%" y="165" width="1.5604%" height="15" fill="rgb(217,162,53)"/><text x="58.8768%" y="175.50"></text></g><g><title>bulk-4be43ee01eb7c08f`rand_chacha::guts::refill_wide (1 samples, 0.02%)</title><rect x="60.1650%" y="149" width="0.0223%" height="15" fill="rgb(229,93,14)"/><text x="60.4150%" y="159.50"></text></g><g><title>bulk-4be43ee01eb7c08f`rand_chacha::guts::refill_wide::impl_avx2 (1 samples, 0.02%)</title><rect x="60.1650%" y="133" width="0.0223%" height="15" fill="rgb(209,67,49)"/><text x="60.4150%" y="143.50"></text></g><g><title>bulk-4be43ee01eb7c08f`rand::rngs::thread::thread_rng (489 samples, 10.90%)</title><rect x="60.1872%" y="165" width="10.9006%" height="15" fill="rgb(213,87,29)"/><text x="60.4372%" y="175.50">bulk-4be43ee01eb..</text></g><g><title>bulk-4be43ee01eb7c08f`rand_chacha::guts::refill_wide (13 samples, 0.29%)</title><rect x="71.0878%" y="165" width="0.2898%" height="15" fill="rgb(205,151,52)"/><text x="71.3378%" y="175.50"></text></g><g><title>bulk-4be43ee01eb7c08f`rand_chacha::guts::refill_wide::impl_avx2 (4 samples, 0.09%)</title><rect x="71.3776%" y="165" width="0.0892%" height="15" fill="rgb(253,215,39)"/><text x="71.6276%" y="175.50"></text></g><g><title>bulk-4be43ee01eb7c08f`rand_chacha::guts::refill_wide (405 samples, 9.03%)</title><rect x="71.4668%" y="165" width="9.0281%" height="15" fill="rgb(221,220,41)"/><text x="71.7168%" y="175.50">bulk-4be43ee0..</text></g><g><title>bulk-4be43ee01eb7c08f`rand_chacha::guts::refill_wide::impl_avx2 (405 samples, 9.03%)</title><rect x="71.4668%" y="149" width="9.0281%" height="15" fill="rgb(218,133,21)"/><text x="71.7168%" y="159.50">bulk-4be43ee0..</text></g><g><title>bulk-4be43ee01eb7c08f`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,905 samples, 42.47%)</title><rect x="41.1280%" y="181" width="42.4654%" height="15" fill="rgb(221,193,43)"/><text x="41.3780%" y="191.50">bulk-4be43ee01eb7c08f`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::i..</text></g><g><title>libdyld.dylib`tlv_get_addr (139 samples, 3.10%)</title><rect x="80.4949%" y="165" width="3.0985%" height="15" fill="rgb(240,128,52)"/><text x="80.7449%" y="175.50">lib..</text></g><g><title>bulk-4be43ee01eb7c08f`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="83.5934%" y="181" width="0.0223%" height="15" fill="rgb(253,114,12)"/><text x="83.8434%" y="191.50"></text></g><g><title>bulk-4be43ee01eb7c08f`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (1 samples, 0.02%)</title><rect x="83.6157%" y="181" width="0.0223%" height="15" fill="rgb(215,223,47)"/><text x="83.8657%" y="191.50"></text></g><g><title>bulk-4be43ee01eb7c08f`rand::rngs::adapter::reseeding::fork::get_fork_counter (10 samples, 0.22%)</title><rect x="83.6380%" y="181" width="0.2229%" height="15" fill="rgb(248,225,23)"/><text x="83.8880%" y="191.50"></text></g><g><title>bulk-4be43ee01eb7c08f`rand::rngs::thread::thread_rng (124 samples, 2.76%)</title><rect x="83.8609%" y="181" width="2.7642%" height="15" fill="rgb(250,108,0)"/><text x="84.1109%" y="191.50">bu..</text></g><g><title>bulk-4be43ee01eb7c08f`hacspec_dev::rand::random_byte_vec (2,044 samples, 45.56%)</title><rect x="41.1280%" y="197" width="45.5640%" height="15" fill="rgb(228,208,7)"/><text x="41.3780%" y="207.50">bulk-4be43ee01eb7c08f`hacspec_dev::rand::random_byte_vec</text></g><g><title>bulk-4be43ee01eb7c08f`rand_chacha::guts::refill_wide (3 samples, 0.07%)</title><rect x="86.6251%" y="181" width="0.0669%" height="15" fill="rgb(244,45,10)"/><text x="86.8751%" y="191.50"></text></g><g><title>bulk-4be43ee01eb7c08f`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="87.3384%" y="181" width="0.0223%" height="15" fill="rgb(207,125,25)"/><text x="87.5884%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.67%)</title><rect x="87.3607%" y="181" width="0.6687%" height="15" fill="rgb(210,195,18)"/><text x="87.6107%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.67%)</title><rect x="87.3607%" y="165" width="0.6687%" height="15" fill="rgb(249,80,12)"/><text x="87.6107%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (30 samples, 0.67%)</title><rect x="87.3607%" y="149" width="0.6687%" height="15" fill="rgb(221,65,9)"/><text x="87.6107%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (24 samples, 0.53%)</title><rect x="87.4944%" y="133" width="0.5350%" height="15" fill="rgb(235,49,36)"/><text x="87.7444%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (19 samples, 0.42%)</title><rect x="87.6059%" y="117" width="0.4235%" height="15" fill="rgb(225,32,20)"/><text x="87.8559%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.20%)</title><rect x="88.0294%" y="181" width="0.2006%" height="15" fill="rgb(215,141,46)"/><text x="88.2794%" y="191.50"></text></g><g><title>bulk-4be43ee01eb7c08f`hacspec_lib::seq::Seq&lt;secret_integers::U8&gt;::from_public_slice (373 samples, 8.31%)</title><rect x="86.6919%" y="197" width="8.3148%" height="15" fill="rgb(250,160,47)"/><text x="86.9419%" y="207.50">bulk-4be43ee..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (304 samples, 6.78%)</title><rect x="88.2300%" y="181" width="6.7766%" height="15" fill="rgb(216,222,40)"/><text x="88.4800%" y="191.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`small_size (29 samples, 0.65%)</title><rect x="95.0067%" y="181" width="0.6465%" height="15" fill="rgb(234,217,39)"/><text x="95.2567%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="95.6531%" y="181" width="0.0223%" height="15" fill="rgb(207,178,40)"/><text x="95.9031%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (31 samples, 0.69%)</title><rect x="95.0067%" y="197" width="0.6910%" height="15" fill="rgb(221,136,13)"/><text x="95.2567%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="95.6754%" y="181" width="0.0223%" height="15" fill="rgb(249,199,10)"/><text x="95.9254%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_finalize_region (1 samples, 0.02%)</title><rect x="95.8092%" y="181" width="0.0223%" height="15" fill="rgb(249,222,13)"/><text x="96.0592%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.11%)</title><rect x="95.8315%" y="181" width="0.1115%" height="15" fill="rgb(244,185,38)"/><text x="96.0815%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (4 samples, 0.09%)</title><rect x="95.9429%" y="181" width="0.0892%" height="15" fill="rgb(236,202,9)"/><text x="96.1929%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (29 samples, 0.65%)</title><rect x="96.0321%" y="181" width="0.6465%" height="15" fill="rgb(250,229,37)"/><text x="96.2821%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (29 samples, 0.65%)</title><rect x="96.0321%" y="165" width="0.6465%" height="15" fill="rgb(206,174,23)"/><text x="96.2821%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (81 samples, 1.81%)</title><rect x="96.6786%" y="165" width="1.8056%" height="15" fill="rgb(211,33,43)"/><text x="96.9286%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`free_small (126 samples, 2.81%)</title><rect x="95.6977%" y="197" width="2.8087%" height="15" fill="rgb(245,58,50)"/><text x="95.9477%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (82 samples, 1.83%)</title><rect x="96.6786%" y="181" width="1.8279%" height="15" fill="rgb(244,68,36)"/><text x="96.9286%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (1 samples, 0.02%)</title><rect x="98.4842%" y="165" width="0.0223%" height="15" fill="rgb(232,229,15)"/><text x="98.7342%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="98.5065%" y="197" width="0.0223%" height="15" fill="rgb(254,30,23)"/><text x="98.7565%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (23 samples, 0.51%)</title><rect x="98.5288%" y="197" width="0.5127%" height="15" fill="rgb(235,160,14)"/><text x="98.7788%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (23 samples, 0.51%)</title><rect x="98.5288%" y="181" width="0.5127%" height="15" fill="rgb(212,155,44)"/><text x="98.7788%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="99.0415%" y="197" width="0.0223%" height="15" fill="rgb(226,2,50)"/><text x="99.2915%" y="207.50"></text></g><g><title>bulk-4be43ee01eb7c08f`main (4,445 samples, 99.09%)</title><rect x="0.0000%" y="341" width="99.0860%" height="15" fill="rgb(234,177,6)"/><text x="0.2500%" y="351.50">bulk-4be43ee01eb7c08f`main</text></g><g><title>bulk-4be43ee01eb7c08f`std::rt::lang_start_internal (4,445 samples, 99.09%)</title><rect x="0.0000%" y="325" width="99.0860%" height="15" fill="rgb(217,24,9)"/><text x="0.2500%" y="335.50">bulk-4be43ee01eb7c08f`std::rt::lang_start_internal</text></g><g><title>bulk-4be43ee01eb7c08f`std::rt::lang_start::_{{closure}} (4,445 samples, 99.09%)</title><rect x="0.0000%" y="309" width="99.0860%" height="15" fill="rgb(220,13,46)"/><text x="0.2500%" y="319.50">bulk-4be43ee01eb7c08f`std::rt::lang_start::_{{closure}}</text></g><g><title>bulk-4be43ee01eb7c08f`std::sys_common::backtrace::__rust_begin_short_backtrace (4,445 samples, 99.09%)</title><rect x="0.0000%" y="293" width="99.0860%" height="15" fill="rgb(239,221,27)"/><text x="0.2500%" y="303.50">bulk-4be43ee01eb7c08f`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>bulk-4be43ee01eb7c08f`bulk::main (4,445 samples, 99.09%)</title><rect x="0.0000%" y="277" width="99.0860%" height="15" fill="rgb(222,198,25)"/><text x="0.2500%" y="287.50">bulk-4be43ee01eb7c08f`bulk::main</text></g><g><title>bulk-4be43ee01eb7c08f`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (4,442 samples, 99.02%)</title><rect x="0.0669%" y="261" width="99.0192%" height="15" fill="rgb(211,99,13)"/><text x="0.3169%" y="271.50">bulk-4be43ee01eb7c08f`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>bulk-4be43ee01eb7c08f`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,442 samples, 99.02%)</title><rect x="0.0669%" y="245" width="99.0192%" height="15" fill="rgb(232,111,31)"/><text x="0.3169%" y="255.50">bulk-4be43ee01eb7c08f`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>bulk-4be43ee01eb7c08f`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,442 samples, 99.02%)</title><rect x="0.0669%" y="229" width="99.0192%" height="15" fill="rgb(245,82,37)"/><text x="0.3169%" y="239.50">bulk-4be43ee01eb7c08f`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>bulk-4be43ee01eb7c08f`criterion::Bencher&lt;M&gt;::iter_batched (4,440 samples, 98.97%)</title><rect x="0.1115%" y="213" width="98.9746%" height="15" fill="rgb(227,149,46)"/><text x="0.3615%" y="223.50">bulk-4be43ee01eb7c08f`criterion::Bencher&lt;M&gt;::iter_batched</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="99.0638%" y="197" width="0.0223%" height="15" fill="rgb(218,36,50)"/><text x="99.3138%" y="207.50"></text></g><g><title>0x1 (4,450 samples, 99.20%)</title><rect x="0.0000%" y="373" width="99.1975%" height="15" fill="rgb(226,80,48)"/><text x="0.2500%" y="383.50">0x1</text></g><g><title>libdyld.dylib`start (4,450 samples, 99.20%)</title><rect x="0.0000%" y="357" width="99.1975%" height="15" fill="rgb(238,224,15)"/><text x="0.2500%" y="367.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (5 samples, 0.11%)</title><rect x="99.0860%" y="341" width="0.1115%" height="15" fill="rgb(241,136,10)"/><text x="99.3360%" y="351.50"></text></g><g><title>bulk-4be43ee01eb7c08f`gcm128_decrypt_opt (9 samples, 0.20%)</title><rect x="99.1975%" y="357" width="0.2006%" height="15" fill="rgb(208,32,45)"/><text x="99.4475%" y="367.50"></text></g><g><title>0x7756c8e4d2fcbc32 (22 samples, 0.49%)</title><rect x="99.1975%" y="373" width="0.4904%" height="15" fill="rgb(207,135,9)"/><text x="99.4475%" y="383.50"></text></g><g><title>bulk-4be43ee01eb7c08f`gcm128_encrypt_opt (13 samples, 0.29%)</title><rect x="99.3981%" y="357" width="0.2898%" height="15" fill="rgb(206,86,44)"/><text x="99.6481%" y="367.50"></text></g><g><title>all (4,486 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(245,177,15)"/><text x="0.2500%" y="399.50"></text></g><g><title>0xe1a2ffc3b02613ae (14 samples, 0.31%)</title><rect x="99.6879%" y="373" width="0.3121%" height="15" fill="rgb(206,64,50)"/><text x="99.9379%" y="383.50"></text></g><g><title>bulk-4be43ee01eb7c08f`gcm128_encrypt_opt (14 samples, 0.31%)</title><rect x="99.6879%" y="357" width="0.3121%" height="15" fill="rgb(234,36,40)"/><text x="99.9379%" y="367.50"></text></g></svg></svg>